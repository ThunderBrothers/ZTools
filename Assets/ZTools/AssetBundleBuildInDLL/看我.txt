――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
ZTools致力于快速的完成重复性工作及提供游戏内置的各种工具性框架


暗夜精灵jj 在2018.10.24更新v1.0版本
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

概述：单个Prefab的AssetBundle包打入简单代码以及生成配置工具
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
******** v1.0

基本版 
1.对一个Prefab文件进行打包，将其代码生成DLL打入AssetBundle包内
2.加载AssetBundle包将其内的Prefab还原
3.提供测试场景
4.提供打包界面


――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
说明;
1.制作时AssetBundle包
	1.1 被打包的资源包括：选中物体及依赖资源，BundleRecord配置文件，output文件
		1.1.1 BundleRecord是.bytes文件可以用文本编辑器打开，以行为间隔，Prefab名称，脚本数，脚本名，脚本挂载物体索引，脚本名，脚本挂载物体索引。。。。。
		1.1.2 output是安装目录Unity/Editor/Data/MonoBleedingEdge/bin/mcs.bat处理后的dll文件的二进制转化
		1.1.3 生成的文件不附带minsfast文件
		1.1.4 代码流程 脚本Process.Start("cmd", cmd)转化生成output文件，遍历主物体生成BundleRecord索引文件，主物体及两个文件生成包
2.读取AssetBundle包(LoadAssetBundle)
	1.1 加载所有包内Shader保存到List
	1.2 ResetAllMaterial读取包内Material和记录的Shader匹配，新建Material找工程内Shader若无则给Material赋值List的Shader
	1.3 AssetBundle.LoadAsset<TextAsset>("bundleRecord")加载bundleRecord文件，按照制作时的规则给List(gameObjectNames和scriptNames)做对一对一记录
	1.4 AssetBundle.LoadAsset<TextAsset>("output")加载output文件， 
		1.4.1 System.Reflection.Assembly dll = null; 
		1.4.2 生成dll dll = System.Reflection.Assembly.Load(asset.bytes);
        1.4.3 得到某个脚本 System.Type t = dll.GetType(scriptNames[i])
		1.4.4 给某个物体添加脚本组件 trans.gameObject.AddComponent(t);
	1.5 AssetBundle.Unload(false)释放资源
3.使用
	1.1 直接生成物体就会对应的功能自动添加
	1.2 简单附带逻辑版的资源热更新
	    

――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
拓展;
1. 代码配置数据保存问题
2. 可直接从Asset中推拽到面板的Editor操作怎么实现
3. Process.Start("cmd", cmd)打开外部程序及cmd字符串命令行写法
4. AssetBundle打包后材质和Shader丢失物体处理 
5. AssetBundle包数据多元化(能包含各种类型的文件)
6. System.Reflection.Assembly dll = null;DLL的定义及使用
7. System.Type t = dll.GetType(scriptNames[i]);trans.gameObject.AddComponent(t);在DLL中用内含的脚本名得到该脚本后以组件的形式添加给物体
8. 读取注册表得到Unity安装路径 RegistryKey key = Registry.CurrentUser.OpenSubKey(@"Software\Unity Technologies\Installer\Unity");
――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――
